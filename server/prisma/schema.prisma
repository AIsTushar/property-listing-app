generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  password   String
  role       UserRole @default(USER)
  userStatus Status   @default(ACTIVE)

  isEmailVerified Boolean @default(false)
  isDeleted       Boolean @default(false)

  resetToken              String?
  resetTokenExpiry        DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile       Profile?
  Property      Property[]
  SavedProperty SavedProperty[]
  Appointment   Appointment[]
  Message       Message[]

  // Relations for messaging
  sentThreads     MessageThread[] @relation("SentThreads")
  receivedThreads MessageThread[] @relation("ReceivedThreads")
  MessageThread   MessageThread[]

  @@map("users")
}

model Profile {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String  @unique @db.ObjectId
  name          String
  phone         String?
  dateOfBirth   String?
  streetAddress String?
  city          String?
  zipCode       String?
  region        String?
  country       String?
  company       String?
  about         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User    @relation(fields: [userId], references: [id])
  Image Image[]

  @@map("profiles")
}

enum ListingType {
  BUY
  RENT
}

model Property {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  title       String
  slug        String      @unique
  description String
  address     String
  zipCode     String
  lat         Float
  long        Float
  bedRooms    Int
  bathRooms   Int
  price       Float
  squareFeet  Float
  landArea    Float
  isFeatured  Boolean     @default(false)
  listingType ListingType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  images          Image[]
  SavedProperty   SavedProperty[]
  video           video[]
  PropertyUtility PropertyUtility?
  NearbyFacility  NearbyFacility[]
  Appointment     Appointment[]

  @@map("properties")
}

model PropertyUtility {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String @unique @db.ObjectId

  heating             String?
  airConditioning     Boolean @default(false)
  wifi                Boolean @default(false)
  lockboxCheckin      Boolean @default(false)
  securityCameras     Boolean @default(false)
  cableTv             Boolean @default(false)
  carbonMonoxideAlarm Boolean @default(false)
  solarPower          Boolean @default(false)
  fireplace           Boolean @default(false)
  ventilation         Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property Property @relation(fields: [propertyId], references: [id])

  @@map("propertyUtilities")
}

model NearbyFacility {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String       @db.ObjectId
  type       FacilityType
  name       String?
  distanceKm Float

  createdAt DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id])

  @@map("nearbyFacilities")
}

enum FacilityType {
  SCHOOL
  SUPERMARKET
  CLINIC
  PARK
  STADIUM
  PHARMACY
  CAFE
  SHOPPING
  CENTER
  CITY_CENTER
  VINEYARD
}

enum ImageRefType {
  CITY
  PROPERTY
  USER
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  refType ImageRefType

  url String
  alt String?

  Profile    Profile?  @relation(fields: [profileId], references: [id])
  profileId  String?   @db.ObjectId
  Property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images")
}

model Appointment {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String            @db.ObjectId
  userId     String            @db.ObjectId
  visitDate  DateTime
  note       String?
  status     AppointmentStatus @default(PENDING)

  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  APPROVED
  REJECTED
}

model video {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String @db.ObjectId

  url String
  alt String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Property Property? @relation(fields: [propertyId], references: [id])

  @@map("videos")
}

model SavedProperty {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  propertyId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  property Property @relation(fields: [propertyId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("savedProperties")
}

// Chat Part check latter
model MessageThread {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String @db.ObjectId
  receiverId String @db.ObjectId

  lastMessage String?
  lastSentAt  DateTime?

  sender   User      @relation("SentThreads", fields: [senderId], references: [id])
  receiver User      @relation("ReceivedThreads", fields: [receiverId], references: [id])
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId

  @@map("messageThreads")
}

model Message {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  threadId String   @db.ObjectId
  senderId String   @db.ObjectId
  content  String
  isRead   Boolean  @default(false)
  sentAt   DateTime @default(now())

  thread MessageThread @relation(fields: [threadId], references: [id])
  sender User          @relation(fields: [senderId], references: [id])

  @@map("messages")
}
